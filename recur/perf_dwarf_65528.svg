<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="358.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="341" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="341" > </text>
<g id="frames">
<g >
<title>_IO_file_write (884,957 samples, 0.01%)</title><rect x="984.0" y="213" width="0.2" height="15.0" fill="rgb(218,59,14)" rx="2" ry="2" />
<text  x="987.03" y="223.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (2,885,186 samples, 0.04%)</title><rect x="984.3" y="261" width="0.4" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="987.26" y="271.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (7,603,384 samples, 0.10%)</title><rect x="1184.3" y="197" width="1.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1187.28" y="207.5" ></text>
</g>
<g >
<title>task_tick_fair (793,014 samples, 0.01%)</title><rect x="1185.0" y="101" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1188.04" y="111.5" ></text>
</g>
<g >
<title>sugov_update_single_freq (672,254 samples, 0.01%)</title><rect x="987.5" y="85" width="0.1" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="990.52" y="95.5" ></text>
</g>
<g >
<title>malloc (3,145,858 samples, 0.04%)</title><rect x="1085.9" y="245" width="0.5" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1088.94" y="255.5" ></text>
</g>
<g >
<title>btrfs_submit_bio (1,143,244 samples, 0.01%)</title><rect x="984.4" y="69" width="0.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="987.41" y="79.5" ></text>
</g>
<g >
<title>__do_softirq (2,023,527 samples, 0.03%)</title><rect x="984.8" y="213" width="0.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="987.76" y="223.5" ></text>
</g>
<g >
<title>tick_nohz_highres_handler (5,726,936 samples, 0.07%)</title><rect x="1184.3" y="165" width="0.9" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="1187.34" y="175.5" ></text>
</g>
<g >
<title>all (7,667,640,512 samples, 100%)</title><rect x="10.0" y="309" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>update_wall_time (800,412 samples, 0.01%)</title><rect x="1082.5" y="117" width="0.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1085.47" y="127.5" ></text>
</g>
<g >
<title>ktime_get_update_offsets_now (1,008,131 samples, 0.01%)</title><rect x="988.0" y="197" width="0.2" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="991.05" y="207.5" ></text>
</g>
<g >
<title>update_process_times (2,113,936 samples, 0.03%)</title><rect x="1083.7" y="133" width="0.4" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1086.73" y="143.5" ></text>
</g>
<g >
<title>account_user_time (669,513 samples, 0.01%)</title><rect x="986.1" y="133" width="0.1" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="989.11" y="143.5" ></text>
</g>
<g >
<title>tick_sched_do_timer (939,318 samples, 0.01%)</title><rect x="1082.5" y="133" width="0.1" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="1085.45" y="143.5" ></text>
</g>
<g >
<title>scheduler_tick (10,016,679 samples, 0.13%)</title><rect x="986.2" y="133" width="1.6" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="989.24" y="143.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (7,228,766 samples, 0.09%)</title><rect x="1082.3" y="229" width="1.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1085.29" y="239.5" ></text>
</g>
<g >
<title>read_hpet (1,463,020 samples, 0.02%)</title><rect x="985.7" y="117" width="0.2" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="988.68" y="127.5" ></text>
</g>
<g >
<title>sysvec_call_function (815,764 samples, 0.01%)</title><rect x="988.2" y="245" width="0.2" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="991.24" y="255.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (22,484,176 samples, 0.29%)</title><rect x="984.7" y="245" width="3.5" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="987.74" y="255.5" ></text>
</g>
<g >
<title>ktime_get (1,015,070 samples, 0.01%)</title><rect x="1184.4" y="149" width="0.1" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1187.36" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (17,647,046 samples, 0.23%)</title><rect x="118.8" y="277" width="2.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="121.82" y="287.5" ></text>
</g>
<g >
<title>update_process_times (2,166,527 samples, 0.03%)</title><rect x="1184.9" y="133" width="0.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1187.89" y="143.5" ></text>
</g>
<g >
<title>_IO_file_overflow (884,957 samples, 0.01%)</title><rect x="984.0" y="261" width="0.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="987.03" y="271.5" ></text>
</g>
<g >
<title>update_curr (1,350,616 samples, 0.02%)</title><rect x="986.9" y="101" width="0.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="989.92" y="111.5" ></text>
</g>
<g >
<title>read_hpet (874,046 samples, 0.01%)</title><rect x="988.1" y="181" width="0.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="991.07" y="191.5" ></text>
</g>
<g >
<title>malloc (1,351,654 samples, 0.02%)</title><rect x="1085.7" y="229" width="0.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1088.74" y="239.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (2,913,149 samples, 0.04%)</title><rect x="1083.6" y="197" width="0.5" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1086.65" y="207.5" ></text>
</g>
<g >
<title>scheduler_tick (1,847,879 samples, 0.02%)</title><rect x="1083.8" y="117" width="0.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1086.77" y="127.5" ></text>
</g>
<g >
<title>read_hpet (1,347,318 samples, 0.02%)</title><rect x="987.8" y="165" width="0.2" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="990.84" y="175.5" ></text>
</g>
<g >
<title>read_hpet (1,343,358 samples, 0.02%)</title><rect x="1184.6" y="101" width="0.2" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1187.58" y="111.5" ></text>
</g>
<g >
<title>tick_sched_handle (4,168,004 samples, 0.05%)</title><rect x="1082.6" y="133" width="0.6" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1085.60" y="143.5" ></text>
</g>
<g >
<title>write (884,957 samples, 0.01%)</title><rect x="984.0" y="197" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="987.03" y="207.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (884,957 samples, 0.01%)</title><rect x="984.0" y="181" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="987.03" y="191.5" ></text>
</g>
<g >
<title>tick_sched_do_timer (3,214,602 samples, 0.04%)</title><rect x="985.6" y="165" width="0.5" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="988.56" y="175.5" ></text>
</g>
<g >
<title>malloc (643,184,952 samples, 8.39%)</title><rect x="1086.5" y="261" width="99.0" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1089.53" y="271.5" >malloc</text>
</g>
<g >
<title>tick_nohz_highres_handler (2,522,543 samples, 0.03%)</title><rect x="1083.7" y="165" width="0.4" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="1086.67" y="175.5" ></text>
</g>
<g >
<title>_IO_do_write (884,957 samples, 0.01%)</title><rect x="984.0" y="245" width="0.2" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="987.03" y="255.5" ></text>
</g>
<g >
<title>do_syscall_64 (884,957 samples, 0.01%)</title><rect x="984.0" y="165" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="987.03" y="175.5" ></text>
</g>
<g >
<title>__handle_mm_fault (2,820,370 samples, 0.04%)</title><rect x="984.3" y="197" width="0.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="987.27" y="207.5" ></text>
</g>
<g >
<title>asm_sysvec_call_function (1,082,083 samples, 0.01%)</title><rect x="988.2" y="261" width="0.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="991.20" y="271.5" ></text>
</g>
<g >
<title>read_pages (1,370,033 samples, 0.02%)</title><rect x="984.4" y="117" width="0.2" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="987.37" y="127.5" ></text>
</g>
<g >
<title>malloc (11,827,951 samples, 0.15%)</title><rect x="1188.2" y="277" width="1.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1191.18" y="287.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (2,146,988 samples, 0.03%)</title><rect x="984.8" y="229" width="0.3" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="987.76" y="239.5" ></text>
</g>
<g >
<title>page_cache_ra_unbounded (2,430,915 samples, 0.03%)</title><rect x="984.3" y="133" width="0.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="987.29" y="143.5" ></text>
</g>
<g >
<title>tick_nohz_highres_handler (16,038,819 samples, 0.21%)</title><rect x="985.4" y="181" width="2.4" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="988.37" y="191.5" ></text>
</g>
<g >
<title>cfree (15,707,615 samples, 0.20%)</title><rect x="1185.6" y="277" width="2.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1188.61" y="287.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (7,228,766 samples, 0.09%)</title><rect x="1082.3" y="213" width="1.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1085.29" y="223.5" ></text>
</g>
<g >
<title>__do_fault (2,549,499 samples, 0.03%)</title><rect x="984.3" y="165" width="0.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="987.27" y="175.5" ></text>
</g>
<g >
<title>cfree (1,360,995 samples, 0.02%)</title><rect x="120.0" y="261" width="0.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="122.97" y="271.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (22,745,298 samples, 0.30%)</title><rect x="984.7" y="261" width="3.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="987.70" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (433,188,341 samples, 5.65%)</title><rect x="10.0" y="261" width="66.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >[libc.s..</text>
</g>
<g >
<title>tick_sched_handle (2,300,787 samples, 0.03%)</title><rect x="1184.9" y="149" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1187.87" y="159.5" ></text>
</g>
<g >
<title>clockevents_program_event (1,347,318 samples, 0.02%)</title><rect x="987.8" y="197" width="0.2" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="990.84" y="207.5" ></text>
</g>
<g >
<title>tick_sched_do_timer (2,273,765 samples, 0.03%)</title><rect x="1184.5" y="149" width="0.4" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="1187.52" y="159.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (2,522,543 samples, 0.03%)</title><rect x="1083.7" y="181" width="0.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1086.67" y="191.5" ></text>
</g>
<g >
<title>[anon] (707,132,683 samples, 9.22%)</title><rect x="10.0" y="277" width="108.8" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >[anon]</text>
</g>
<g >
<title>perf_adjust_freq_unthr_context (932,824 samples, 0.01%)</title><rect x="986.3" y="101" width="0.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="989.30" y="111.5" ></text>
</g>
<g >
<title>timekeeping_update (955,982 samples, 0.01%)</title><rect x="985.9" y="117" width="0.2" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="988.90" y="127.5" ></text>
</g>
<g >
<title>btrfs_lookup_bio_sums (683,855 samples, 0.01%)</title><rect x="984.4" y="37" width="0.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="987.41" y="47.5" ></text>
</g>
<g >
<title>error_entry (802,377 samples, 0.01%)</title><rect x="1188.1" y="277" width="0.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1191.06" y="287.5" ></text>
</g>
<g >
<title>scheduler_tick (1,744,435 samples, 0.02%)</title><rect x="1184.9" y="117" width="0.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1187.93" y="127.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (7,870,500 samples, 0.10%)</title><rect x="1184.2" y="229" width="1.3" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1187.24" y="239.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (3,849,610 samples, 0.05%)</title><rect x="1083.5" y="245" width="0.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1086.50" y="255.5" ></text>
</g>
<g >
<title>cfree (636,885,021 samples, 8.31%)</title><rect x="988.4" y="261" width="98.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="991.42" y="271.5" >cfree</text>
</g>
<g >
<title>ktime_get (1,072,672 samples, 0.01%)</title><rect x="985.4" y="165" width="0.2" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="988.39" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,760,349 samples, 0.02%)</title><rect x="1085.0" y="229" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1088.03" y="239.5" ></text>
</g>
<g >
<title>update_load_avg (3,249,796 samples, 0.04%)</title><rect x="987.1" y="101" width="0.5" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="990.12" y="111.5" ></text>
</g>
<g >
<title>update_process_times (11,336,987 samples, 0.15%)</title><rect x="986.1" y="149" width="1.7" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="989.09" y="159.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (20,244,557 samples, 0.26%)</title><rect x="985.1" y="229" width="3.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="988.09" y="239.5" ></text>
</g>
<g >
<title>do_fault (2,820,370 samples, 0.04%)</title><rect x="984.3" y="181" width="0.4" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="987.27" y="191.5" ></text>
</g>
<g >
<title>read_hpet (810,074 samples, 0.01%)</title><rect x="1184.4" y="133" width="0.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1187.39" y="143.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (3,188,072 samples, 0.04%)</title><rect x="1083.6" y="213" width="0.5" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1086.61" y="223.5" ></text>
</g>
<g >
<title>scheduler_tick (2,816,615 samples, 0.04%)</title><rect x="1082.7" y="101" width="0.5" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1085.74" y="111.5" ></text>
</g>
<g >
<title>sched_clock_tick (1,715,819 samples, 0.02%)</title><rect x="986.5" y="117" width="0.2" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="989.47" y="127.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (6,128,122 samples, 0.08%)</title><rect x="1184.3" y="181" width="0.9" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1187.28" y="191.5" ></text>
</g>
<g >
<title>task_tick_fair (1,745,018 samples, 0.02%)</title><rect x="1082.9" y="85" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1085.87" y="95.5" ></text>
</g>
<g >
<title>ktime_get (1,347,318 samples, 0.02%)</title><rect x="987.8" y="181" width="0.2" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="990.84" y="191.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (8,409,699 samples, 0.11%)</title><rect x="1184.2" y="245" width="1.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1187.16" y="255.5" ></text>
</g>
<g >
<title>timekeeping_advance (800,412 samples, 0.01%)</title><rect x="1082.5" y="101" width="0.1" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="1085.47" y="111.5" ></text>
</g>
<g >
<title>task_tick_fair (5,812,193 samples, 0.08%)</title><rect x="986.7" y="117" width="0.9" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="989.73" y="127.5" ></text>
</g>
<g >
<title>submit_one_bio (1,143,244 samples, 0.01%)</title><rect x="984.4" y="85" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="987.41" y="95.5" ></text>
</g>
<g >
<title>read_hpet (1,578,582 samples, 0.02%)</title><rect x="986.5" y="85" width="0.2" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="989.49" y="95.5" ></text>
</g>
<g >
<title>task_tick_fair (1,197,443 samples, 0.02%)</title><rect x="1083.9" y="101" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1086.87" y="111.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (6,824,384 samples, 0.09%)</title><rect x="1082.3" y="197" width="1.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1085.33" y="207.5" ></text>
</g>
<g >
<title>update_load_avg (1,218,911 samples, 0.02%)</title><rect x="1082.9" y="69" width="0.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="1085.95" y="79.5" ></text>
</g>
<g >
<title>do_user_addr_fault (2,885,186 samples, 0.04%)</title><rect x="984.3" y="229" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="987.26" y="239.5" ></text>
</g>
<g >
<title>update_rq_clock (861,140 samples, 0.01%)</title><rect x="987.6" y="117" width="0.2" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="990.65" y="127.5" ></text>
</g>
<g >
<title>timekeeping_advance (2,273,765 samples, 0.03%)</title><rect x="1184.5" y="117" width="0.4" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="1187.52" y="127.5" ></text>
</g>
<g >
<title>read_hpet (653,808 samples, 0.01%)</title><rect x="1185.3" y="165" width="0.1" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1188.33" y="175.5" ></text>
</g>
<g >
<title>vfs_write (884,957 samples, 0.01%)</title><rect x="984.0" y="133" width="0.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="987.03" y="143.5" ></text>
</g>
<g >
<title>read_hpet (1,072,672 samples, 0.01%)</title><rect x="985.4" y="149" width="0.2" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="988.39" y="159.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (16,910,251 samples, 0.22%)</title><rect x="985.2" y="197" width="2.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="988.24" y="207.5" ></text>
</g>
<g >
<title>cfree (2,854,216 samples, 0.04%)</title><rect x="1085.3" y="229" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1088.30" y="239.5" ></text>
</g>
<g >
<title>extent_readahead (1,143,244 samples, 0.01%)</title><rect x="984.4" y="101" width="0.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="987.41" y="111.5" ></text>
</g>
<g >
<title>handle_mm_fault (2,820,370 samples, 0.04%)</title><rect x="984.3" y="213" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="987.27" y="223.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,499,509 samples, 0.02%)</title><rect x="1183.9" y="245" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1186.90" y="255.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (3,454,102 samples, 0.05%)</title><rect x="1083.6" y="229" width="0.5" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1086.56" y="239.5" ></text>
</g>
<g >
<title>filemap_fault (2,549,499 samples, 0.03%)</title><rect x="984.3" y="149" width="0.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="987.27" y="159.5" ></text>
</g>
<g >
<title>cfree (118,344,907 samples, 1.54%)</title><rect x="76.7" y="261" width="18.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="79.66" y="271.5" ></text>
</g>
<g >
<title>ktime_get_update_offsets_now (790,391 samples, 0.01%)</title><rect x="1185.3" y="181" width="0.2" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1188.33" y="191.5" ></text>
</g>
<g >
<title>tick_sched_handle (2,113,936 samples, 0.03%)</title><rect x="1083.7" y="149" width="0.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1086.73" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (132,829,013 samples, 1.73%)</title><rect x="1063.1" y="245" width="20.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1066.06" y="255.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (7,603,384 samples, 0.10%)</title><rect x="1184.3" y="213" width="1.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1187.28" y="223.5" ></text>
</g>
<g >
<title>[unknown] (6,913,707,898 samples, 90.17%)</title><rect x="121.5" y="277" width="1064.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="124.54" y="287.5" >[unknown]</text>
</g>
<g >
<title>[libc.so.6] (884,957 samples, 0.01%)</title><rect x="984.0" y="229" width="0.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="987.03" y="239.5" ></text>
</g>
<g >
<title>ktime_get (1,715,819 samples, 0.02%)</title><rect x="986.5" y="101" width="0.2" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="989.47" y="111.5" ></text>
</g>
<g >
<title>tick_sched_handle (11,616,374 samples, 0.15%)</title><rect x="986.1" y="165" width="1.7" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="989.05" y="175.5" ></text>
</g>
<g >
<title>update_wall_time (2,947,907 samples, 0.04%)</title><rect x="985.6" y="149" width="0.5" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="988.60" y="159.5" ></text>
</g>
<g >
<title>perf_event_task_tick (932,824 samples, 0.01%)</title><rect x="986.3" y="117" width="0.1" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="989.30" y="127.5" ></text>
</g>
<g >
<title>tick_nohz_highres_handler (5,509,219 samples, 0.07%)</title><rect x="1082.4" y="149" width="0.8" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="1085.39" y="159.5" ></text>
</g>
<g >
<title>update_wall_time (2,273,765 samples, 0.03%)</title><rect x="1184.5" y="133" width="0.4" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1187.52" y="143.5" ></text>
</g>
<g >
<title>asm_sysvec_call_function (680,604 samples, 0.01%)</title><rect x="1083.4" y="229" width="0.1" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1086.40" y="239.5" ></text>
</g>
<g >
<title>malloc (8,818,221 samples, 0.12%)</title><rect x="120.2" y="261" width="1.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="123.18" y="271.5" ></text>
</g>
<g >
<title>ksys_write (884,957 samples, 0.01%)</title><rect x="984.0" y="149" width="0.2" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="987.03" y="159.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (6,042,477 samples, 0.08%)</title><rect x="1082.3" y="165" width="1.0" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1085.33" y="175.5" ></text>
</g>
<g >
<title>btrfs_submit_chunk (1,143,244 samples, 0.01%)</title><rect x="984.4" y="53" width="0.2" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="987.41" y="63.5" ></text>
</g>
<g >
<title>[libc.so.6] (577,654,304 samples, 7.53%)</title><rect x="895.1" y="261" width="88.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="898.13" y="271.5" >[libc.so.6]</text>
</g>
<g >
<title>malloc (155,599,435 samples, 2.03%)</title><rect x="94.9" y="261" width="23.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="97.88" y="271.5" >m..</text>
</g>
<g >
<title>exc_page_fault (2,885,186 samples, 0.04%)</title><rect x="984.3" y="245" width="0.4" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="987.26" y="255.5" ></text>
</g>
<g >
<title>cfree (11,878,882 samples, 0.15%)</title><rect x="1084.1" y="245" width="1.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1087.12" y="255.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (6,824,384 samples, 0.09%)</title><rect x="1082.3" y="181" width="1.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1085.33" y="191.5" ></text>
</g>
<g >
<title>perf-exec (7,667,640,512 samples, 100.00%)</title><rect x="10.0" y="293" width="1180.0" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >perf-exec</text>
</g>
<g >
<title>timekeeping_advance (2,947,907 samples, 0.04%)</title><rect x="985.6" y="133" width="0.5" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="988.60" y="143.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (19,854,285 samples, 0.26%)</title><rect x="985.1" y="213" width="3.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="988.15" y="223.5" ></text>
</g>
<g >
<title>update_process_times (3,905,699 samples, 0.05%)</title><rect x="1082.6" y="117" width="0.6" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1085.64" y="127.5" ></text>
</g>
</g>
</svg>
